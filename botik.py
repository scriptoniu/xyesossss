import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏)
BOT_TOKEN = "7755541704:AAHINZn-mtLddqc7RJV1VHCpE6AbAzwAAuI"
ADMIN_IDS = {7091921882, 123456789}  # –¢–µ–ø–µ—Ä—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤
ALLOWED_USERS = {*ADMIN_IDS, 987654321}  # –ê–¥–º–∏–Ω—ã + –¥—Ä—É–≥–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
CHATS_FILE = "target_chats.txt"
IGNORED_USERS_FILE = "ignored_users.txt"
TRACKING_ENABLED = True

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

def load_chats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞"""
    chats = {}
    try:
        with open(CHATS_FILE, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                parts = line.split(maxsplit=1)
                if len(parts) == 2:
                    chat_id, name = parts
                    chats[chat_id] = {"name": name, "is_open": True}
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ {CHATS_FILE}: {line}")
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {CHATS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}")
    return chats

def save_chats(chats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    try:
        with open(CHATS_FILE, "w", encoding="utf-8") as f:
            for chat_id, info in chats.items():
                f.write(f"{chat_id} {info['name']}\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")

def load_ignored_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(IGNORED_USERS_FILE, "r") as f:
            return [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö: {e}")
        return []

async def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(user_id) in map(str, ADMIN_IDS)

async def is_allowed(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É"""
    return str(user_id) in map(str, ALLOWED_USERS)

async def set_chat_permissions(chat_id, is_open):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ —á–∞—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.set_chat_permissions(
            int(chat_id),
            types.ChatPermissions(
                can_send_messages=is_open,
                can_send_media_messages=is_open,
                can_send_other_messages=is_open,
                can_add_web_page_previews=is_open
            )
        )
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

async def get_actual_chats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —á–∞—Ç—ã, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    chats = load_chats()
    actual_chats = {}
    
    for chat_id in chats:
        try:
            chat_member = await bot.get_chat_member(int(chat_id), bot.id)
            if chat_member.status in ["administrator", "creator"]:
                actual_chats[chat_id] = chats[chat_id]
        except Exception as e:
            logger.warning(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞ {chat_id} –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤: {e}")
    
    return actual_chats

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not await is_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    
    text = (
        "ü§ñ <b>–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏</b>\n\n"
        "üîπ <code>/chats</code> - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
        "üîπ <code>/manage</code> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º\n"
        "üîπ <code>/tracking</code> - –≤–∫–ª/–≤—ã–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n"
        "üîπ <code>/ignored</code> - —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö"
    )
    
    if await is_admin(message.from_user.id):
        text += "\n\n‚öôÔ∏è <i>–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –±–æ—Ç–∞</i>"
    
    await message.answer(text)

@dp.message(Command("manage"))
async def cmd_manage(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –≤ —á–∞—Ç–∞—Ö"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Ç–∞–º–∏")
        return

    actual_chats = await get_actual_chats()
    if not actual_chats:
        await message.answer("ü§∑‚Äç‚ôÇÔ∏è –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —á–∞—Ç–æ–≤")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîì –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ", callback_data="open_all"),
            InlineKeyboardButton(text="üîí –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ", callback_data="close_all")
        ],
        *[
            [InlineKeyboardButton(
                text=f"{'üîì' if info['is_open'] else 'üîí'} {info['name'][:15]}...",
                callback_data=f"toggle:{chat_id}"
            )]
            for chat_id, info in actual_chats.items()
        ]
    ])

    await message.answer(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ —Å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏):</b>\n"
        "üîì - —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç\n"
        "üîí - —á–∞—Ç –∑–∞–∫—Ä—ã—Ç",
        reply_markup=keyboard
    )

@dp.callback_query()
async def process_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    actual_chats = await get_actual_chats()
    data = callback.data
    success_count = 0

    try:
        if data in ["open_all", "close_all"]:
            is_open = data == "open_all"
            for chat_id in actual_chats:
                if await set_chat_permissions(chat_id, is_open):
                    actual_chats[chat_id]["is_open"] = is_open
                    success_count += 1
            
            save_chats(actual_chats)
            await callback.answer(
                f"–£—Å–ø–µ—à–Ω–æ {'–æ—Ç–∫—Ä—ã—Ç–æ' if is_open else '–∑–∞–∫—Ä—ã—Ç–æ'} {success_count}/{len(actual_chats)} —á–∞—Ç–æ–≤",
                show_alert=True
            )

        elif data.startswith("toggle:"):
            chat_id = data.split(":")[1]
            if chat_id in actual_chats:
                is_open = not actual_chats[chat_id]["is_open"]
                if await set_chat_permissions(chat_id, is_open):
                    actual_chats[chat_id]["is_open"] = is_open
                    save_chats(actual_chats)
                    await callback.answer(f"–ß–∞—Ç {'–æ—Ç–∫—Ä—ã—Ç' if is_open else '–∑–∞–∫—Ä—ã—Ç'}")
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤", show_alert=True)
            else:
                await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        await cmd_manage(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (/chats, /tracking, /ignored) –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–µ—Ä—Å–∏—è–º
# ...

@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not await is_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    await track_message(message)

async def track_message(message: types.Message):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not TRACKING_ENABLED:
        return

    if not await is_admin(message.from_user.id) and str(message.from_user.id) not in load_ignored_users():
        chat_id = str(message.chat.id)
        chats = load_chats()
        
        if chat_id in chats:
            user = message.from_user
            chat = message.chat
            
            if chat.username:
                message_link = f"https://t.me/{chat.username}/{message.message_id}"
            else:
                message_link = f"https://t.me/c/{str(abs(int(chat.id)))[4:]}/{message.message_id}" if str(chat.id).startswith("-100") else f"chat_id: {chat.id}"

            text = (
                f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                f"üë§ <b>–û—Ç:</b> {user.full_name} (@{user.username or '–Ω–µ—Ç'})\n"
                f"üÜî <b>ID:</b> <code>{user.id}</code>\n"
                f"üí¨ <b>–ß–∞—Ç:</b> {chat.title}\n"
                f"üîó <a href='{message_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n<code>{message.text or '–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ'}</code>"
            )
            
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(admin_id, text)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ admin {admin_id}: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())