import time
import os
from telethon import TelegramClient
from telethon.errors import FloodWaitError
from telethon.tl.functions.contacts import InviteToChannelRequest
import asyncio

API_ID = 'your_api_id'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_ID
API_HASH = 'your_api_hash'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_HASH

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
SESSION_DIR = 'sessions'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ sessions.txt
def read_sessions_from_file():
    if not os.path.exists('sessions.txt'):
        print("‚ùå –§–∞–π–ª sessions.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    with open('sessions.txt', 'r') as f:
        phones = [line.strip() for line in f.readlines()]
    return phones

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—ã –∏–∑ —Ñ–∞–π–ª–∞ groups.txt
def read_groups_from_file():
    if not os.path.exists('groups.txt'):
        print("‚ùå –§–∞–π–ª groups.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    with open('groups.txt', 'r') as f:
        groups = [line.strip() for line in f.readlines()]
    return groups

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
async def join_group(client, group_link):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫—É –≤ –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞
        group = await client.get_entity(group_link)
        
        # –í—Å—Ç—É–ø–∞–µ–º –≤ –≥—Ä—É–ø–ø—É
        await client(InviteToChannelRequest(group, [client.get_me()]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º InviteToChannelRequest
        print(f"‚úÖ –í—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É: {group_link}")
    except FloodWaitError as e:
        # –ï—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∂–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥.")
        time.sleep(e.seconds)
        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É {group_link}: {str(e)}")
        return False

    return True

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
async def join_groups():
    phones = read_sessions_from_file()
    groups = read_groups_from_file()

    if not phones or not groups:
        print("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–π –∏–ª–∏ –≥—Ä—É–ø–ø –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    for phone in phones:
        session_file = os.path.join(SESSION_DIR, f"{phone.replace('+', '').replace(' ', '')}.session")
        
        if not os.path.exists(session_file):
            print(f"‚ùå –°–µ—Å—Å–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            continue

        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}...")
        client = TelegramClient(session_file, API_ID, API_HASH)

        await client.start()

        joined_count = 0
        for group_link in groups:
            if joined_count >= 5:
                print("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –æ–∂–∏–¥–∞–µ–º 10 –º–∏–Ω—É—Ç...")
                time.sleep(600)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
                joined_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            success = await join_group(client, group_link)
            if success:
                joined_count += 1

        print(f"üöÄ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã –¥–ª—è {phone}.")

if __name__ == '__main__':
    asyncio.run(join_groups())