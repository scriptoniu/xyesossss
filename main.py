import os
from telethon import TelegramClient, events
import asyncio
import math

API_ID = 25293202  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API ID
API_HASH = '68a935aff803647b47acf3fb28a3d765'  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API HASH

SESSION_DIR = 'sessions'
SESSIONS_FILE = 'sessions.txt'

if not os.path.exists(SESSION_DIR):
    os.makedirs(SESSION_DIR)

if not os.path.exists(SESSIONS_FILE):
    with open(SESSIONS_FILE, 'w') as f:
        pass

message_map = {}

def remove_invalid_session_from_file(phone):
    try:
        with open(SESSIONS_FILE, "r") as f:
            lines = f.readlines()

        with open(SESSIONS_FILE, "w") as f:
            for line in lines:
                if line.strip() != phone:
                    f.write(line)
        print(f"–ù–æ–º–µ—Ä {phone} —É–¥–∞–ª–µ–Ω –∏–∑ sessions.txt")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")

async def start_client(phone):
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ {phone}...")

    session_file = os.path.join(SESSION_DIR, f"{phone.replace('+', '')}.session")
    if not os.path.exists(session_file):
        print(f"‚ùå –°–µ—Å—Å–∏—è {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    try:
        client = TelegramClient(session_file, API_ID, API_HASH)
        await client.connect()

        if not await client.is_user_authorized():
            print(f"‚ùå –°–µ—Å—Å–∏—è {phone} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
            os.remove(session_file)
            remove_invalid_session_from_file(phone)
            return None

        me = await client.get_me()
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {phone} –∑–∞–ø—É—â–µ–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ {phone}: {str(e)}")
        os.remove(session_file)
        remove_invalid_session_from_file(phone)
        return None

async def main():
    with open(SESSIONS_FILE, "r") as f:
        phones = [line.strip() for line in f.readlines() if line.strip()]

    with open("source_chat.txt", "r") as f:
        source_chat = int(f.read().strip())

    with open("target_chats.txt", "r") as f:
        target_chats = [int(line.strip()) for line in f.readlines()]

    clients = []
    for phone in phones:
        client = await start_client(f"+{phone}")
        if client:
            clients.append(client)

    if not clients:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return

    print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")

    # === HANDLER: –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
    @events.register(events.NewMessage())
    async def handler(event):
        try:
            chat_id = event.chat_id
            sender = await event.get_sender()

            if chat_id == source_chat and sender.id == (await event.client.get_me()).id:
                message = event.message
                print(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º...")

                batch_size = 10
                delay_between_batches = 5
                total_batches = math.ceil(len(target_chats) / batch_size)

                for batch_index in range(total_batches):
                    batch = target_chats[batch_index * batch_size : (batch_index + 1) * batch_size]
                    for target in batch:
                        try:
                            reply_to = None
                            if message.reply_to:
                                replied = await message.get_reply_message()
                                if replied:
                                    async for msg in event.client.iter_messages(target, search=replied.text):
                                        if msg.text == replied.text:
                                            reply_to = msg.id
                                            break

                            if message.media:
                                sent = await event.client.send_file(
                                    target, message.media, caption=message.text, reply_to=reply_to)
                            else:
                                sent = await event.client.send_message(
                                    target, message.text, reply_to=reply_to)

                            if message.id not in message_map:
                                message_map[message.id] = {}
                            message_map[message.id][target] = sent.id

                            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target}: ID {sent.id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {target}: {str(e)}")

                    if batch_index < total_batches - 1:
                        print(f"‚è≥ –ñ–¥–µ–º {delay_between_batches} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(delay_between_batches)
            else:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –Ω–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ NewMessage: {str(e)}")

    # === HANDLER: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
    @events.register(events.MessageEdited())
    async def edit_handler(event):
        try:
            if event.chat_id == source_chat:
                msg_id = event.message.id
                print("‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ")
                if msg_id in message_map:
                    for target in target_chats:
                        try:
                            target_id = message_map[msg_id].get(target)
                            if target_id:
                                msg = await event.client.get_messages(target, ids=target_id)
                                if msg:
                                    await msg.edit(event.message.text)
                                    print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ –≤ —á–∞—Ç–µ {target}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {target}: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ edit_handler: {e}")

    # === HANDLER: –£–¥–∞–ª–µ–Ω–∏–µ ===
    @events.register(events.MessageDeleted())
    async def delete_handler(event):
        try:
            if event.chat_id == source_chat:
                for msg_id in event.deleted_ids:
                    if msg_id in message_map:
                        for target in target_chats:
                            try:
                                target_id = message_map[msg_id].get(target)
                                if target_id:
                                    await event.client.delete_messages(target, target_id)
                                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {target}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ {target}: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ delete_handler: {e}")

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    for client in clients:
        client.add_event_handler(handler)
        client.add_event_handler(edit_handler)
        client.add_event_handler(delete_handler)

    print("üëÇ –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await asyncio.gather(*[client.run_until_disconnected() for client in clients])

if __name__ == '__main__':
    asyncio.run(main())