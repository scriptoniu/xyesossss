from telethon import TelegramClient, events
import asyncio
import os

API_ID = 25293202  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API ID
API_HASH = '68a935aff803647b47acf3fb28a3d765'  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API HASH

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–∞—Ö
message_map = {}

async def start_client(phone):
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ {phone}...")

    session_file = f"{phone.replace('+', '')}.session"
    if not os.path.exists(session_file):
        print(f"‚ùå –°–µ—Å—Å–∏—è {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    try:
        client = TelegramClient(session_file, API_ID, API_HASH)
        await client.connect()

        if not await client.is_user_authorized():
            print(f"‚ùå –°–µ—Å—Å–∏—è {phone} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
            return None

        me = await client.get_me()
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {phone} –∑–∞–ø—É—â–µ–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ {phone}: {str(e)}")
        return None

async def main():
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞ sessions.txt
    with open("sessions.txt", "r") as f:
        phones = [line.strip() for line in f.readlines() if line.strip()]

    # –ß—Ç–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
    with open("source_chat.txt", "r") as f:
        source_chat = int(f.read().strip())

    with open("target_chats.txt", "r") as f:
        target_chats = [int(line.strip()) for line in f.readlines()]

    clients = []
    for phone in phones:
        client = await start_client(f"+{phone}")
        if client:
            clients.append(client)

    if not clients:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return

    print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")

    @events.register(events.NewMessage())
    async def handler(event):
        try:
            chat_id = event.chat_id
            sender = await event.get_sender()

            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ source_chat –∏ target_chats
            if chat_id == source_chat and sender.id == (await event.client.get_me()).id:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")
                message = event.message
                for target in target_chats:
                    try:
                        reply_to = None
                        if message.reply_to:
                            replied = await message.get_reply_message()
                            if replied:
                                async for msg in event.client.iter_messages(target, search=replied.text):
                                    if msg.text == replied.text:
                                        reply_to = msg.id
                                        break

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                        if message.media:
                            sent_message = await event.client.send_file(target, message.media, caption=message.text, reply_to=reply_to)
                        else:
                            sent_message = await event.client.send_message(target, message.text, reply_to=reply_to)

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
                        message_map[message.id] = { "source_chat_id": message.id, "target_chat_id": sent_message.id }
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target} —Å ID: {sent_message.id}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {target}: {str(e)}")
            else:
                print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {str(e)}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    @events.register(events.MessageEdited())
    async def edit_handler(event):
        try:
            chat_id = event.chat_id
            message_id = event.message.id
            sender = await event.get_sender()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ –∏ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if chat_id == source_chat and sender.id == (await event.client.get_me()).id:
                print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ")

                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –º—ã –∏—â–µ–º –µ–≥–æ –≤ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–∞—Ö –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É ID
                if message_id in message_map:
                    target_message_id = message_map[message_id]["target_chat_id"]
                    for target in target_chats:
                        try:
                            target_client = event.client
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º `get_messages` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
                            target_message = await target_client.get_messages(target, ids=target_message_id)
                            if target_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
                                # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
                                await target_message.edit(event.message.text)
                                if event.message.media:
                                    await target_message.edit(file=event.message.media)
                                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ {target}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ {target}: {str(e)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    @events.register(events.MessageDeleted())
    async def delete_handler(event):
        try:
            chat_id = event.chat_id
            deleted_message_ids = event.deleted_ids

            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ –∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if chat_id == source_chat:
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ")

                # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–∞—Ö
                for deleted_message_id in deleted_message_ids:
                    if deleted_message_id in message_map:
                        target_message_id = message_map[deleted_message_id]["target_chat_id"]
                        for target in target_chats:
                            try:
                                target_client = event.client
                                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
                                target_message = await target_client.get_messages(target, ids=target_message_id)
                                if target_message:
                                    await target_message.delete()
                                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ {target}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤ {target}: {str(e)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    for client in clients:
        client.add_event_handler(handler)
        client.add_event_handler(edit_handler)
        client.add_event_handler(delete_handler)

    print("üëÇ –ë–æ—Ç—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...")
    await asyncio.gather(*[client.run_until_disconnected() for client in clients])

if __name__ == '__main__':
    asyncio.run(main())
