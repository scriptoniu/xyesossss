import os
from telethon import TelegramClient, events
import asyncio

API_ID = 25293202  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API ID
API_HASH = '68a935aff803647b47acf3fb28a3d765'  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π API HASH

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ .session
SESSION_DIR = 'sessions'
SESSIONS_FILE = 'sessions.txt'  # –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º sessions.txt

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(SESSION_DIR):
    os.makedirs(SESSION_DIR)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª sessions.txt, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
if not os.path.exists(SESSIONS_FILE):
    with open(SESSIONS_FILE, 'w') as f:
        pass  # –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∏—Ç–æ–π —Å–µ—Å—Å–∏–∏
def remove_invalid_session_from_file(phone):
    """–£–¥–∞–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ sessions.txt, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –±–∏—Ç–∞—è."""
    try:
        with open(SESSIONS_FILE, "r") as f:
            lines = f.readlines()

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        with open(SESSIONS_FILE, "w") as f:
            for line in lines:
                if line.strip() != phone:
                    f.write(line)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ {SESSIONS_FILE}: {str(e)}")

async def start_client(phone):
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ {phone}...")

    session_file = os.path.join(SESSION_DIR, f"{phone.replace('+', '')}.session")
    if not os.path.exists(session_file):
        print(f"‚ùå –°–µ—Å—Å–∏—è {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    try:
        client = TelegramClient(session_file, API_ID, API_HASH)
        await client.connect()

        if not await client.is_user_authorized():
            print(f"‚ùå –°–µ—Å—Å–∏—è {phone} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ –∏–∑ —Ñ–∞–π–ª–∞, –∏ –∏–∑ –ø–∞–ø–∫–∏
            os.remove(session_file)
            remove_invalid_session_from_file(phone)
            return None

        me = await client.get_me()
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {phone} –∑–∞–ø—É—â–µ–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ {phone}: {str(e)}")
        return None

async def main():
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞ sessions.txt
    with open(SESSIONS_FILE, "r") as f:
        phones = [line.strip() for line in f.readlines() if line.strip()]

    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã
    with open("source_chat.txt", "r") as f:
        source_chat = int(f.read().strip())

    with open("target_chats.txt", "r") as f:
        target_chats = [int(line.strip()) for line in f.readlines()]

    clients = []
    for phone in phones:
        client = await start_client(f"+{phone}")
        if client:
            clients.append(client)

    if not clients:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return

    print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")

    @events.register(events.NewMessage())
    async def handler(event):
        try:
            chat_id = event.chat_id
            sender = await event.get_sender()

            if chat_id == source_chat and sender.id == (await event.client.get_me()).id:
                message = event.message
                print(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º...")

                for target in target_chats:
                    try:
                        reply_to = None
                        if message.reply_to:
                            replied = await message.get_reply_message()
                            if replied:
                                async for msg in event.client.iter_messages(target, search=replied.text):
                                    if msg.text == replied.text:
                                        reply_to = msg.id
                                        break

                        if message.media:
                            sent_message = await event.client.send_file(target, message.media, caption=message.text, reply_to=reply_to)
                        else:
                            sent_message = await event.client.send_message(target, message.text, reply_to=reply_to)

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ message_map
                        if message.id not in message_map:
                            message_map[message.id] = {}
                        message_map[message.id][target] = sent_message.id

                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target}: ID {sent_message.id}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {target}: {str(e)}")
            else:
                print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ NewMessage: {str(e)}")

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    for client in clients:
        client.add_event_handler(handler)

    print("üëÇ –ë–æ—Ç—ã —Å–ª—É—à–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await asyncio.gather(*[client.run_until_disconnected() for client in clients])

if __name__ == '__main__':
    asyncio.run(main())